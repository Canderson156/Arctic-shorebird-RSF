#landcover
ggplot(lc_only, aes(value)) +
geom_density() +
facet_wrap(~variable, scales = "free")
#landcover
ggplot(lc_only, aes(value)) +
geom_density() +
facet_wrap(~variable, scales = "free", adjust = 1)
#landcover
ggplot(lc_only, aes(value)) +
geom_density(adjust = 1) +
facet_wrap(~variable, scales = "free")
#landcover
ggplot(lc_only, aes(value)) +
geom_density(adjust = 0.5) +
facet_wrap(~variable, scales = "free")
#landcover
ggplot(lc_only, aes(value)) +
geom_density(adjust = 2) +
facet_wrap(~variable, scales = "free")
#landcover
ggplot(lc_only, aes(value)) +
geom_density() +
facet_wrap(~variable, scales = "free") +
scale_y_sqrt()
#landcover
ggplot(lc_only, aes(value)) +
geom_density() +
facet_wrap(~variable, scales = "free") +
scale_y_sqrt() +
labs(x = "% cover")
temps_sp <- temps_only %>%
group_by(Species) %>%
group_split()
gg_temps_sp <- function(data){
title <- unique(data$Species)
ggplot(data, aes(x = presence, y = value)) +
geom_boxplot() +
facet_wrap(~variable, labeller = labeller(variable = temp_labs)) +
ggtitle(title) +
labs(y = "temperature")
}
plots_temps_sp <- lapply(temps_sp, gg_temps_sp)
plots_temps_sp[[1]]
lc_sp0 <- lc_only %>%
mutate(value = ifelse(value == 0, 0.00001, value)) %>%
group_by(Species) %>%
group_split()
lc_sp0 <- lc_only %>%
mutate(value = ifelse(value == 0, 0.00001, value)) %>%
group_by(Species) %>%
group_split()
gg_lc_sp <- function(data){
title <- unique(data$Species)
ggplot(data, aes(colour = presence, x = value)) +
geom_density() +
facet_wrap(~variable, scales = "free_y") +
ggtitle(title)
}
plots_lc0_sp <- lapply(lc_sp0, gg_lc_sp)
plots_lc0_sp[1]
plots_lc0_sp[1]
gg_lc_sp <- function(data){
title <- unique(data$Species)
ggplot(data, aes(colour = presence, x = value)) +
geom_density() +
facet_wrap(~variable, scales = "free_y") +
ggtitle(title) +
scale_y_sqrt()
}
plots_lc0_sp <- lapply(lc_sp0, gg_lc_sp)
plots_lc0_sp[1]
plots_lc0_sp[2]
plots_lc0_sp[3]
plots_lc0_sp[4]
plots_lc0_sp[5]
plots_lc0_sp
#extract environmental variables for surveyed plots
### some inconsitiencies in this code:
#why do the avg temps end up with 8 plots with "NaN", but the annual ones don't?
#Why does the finaly version of all_polygons_df have so many duplicated rows, which I got rid of using distinct()?
#I had figured this out and now I don't recall the answer
### Split this into 2 different scripts
filelist1 <- list.files("data/climate/WorldClim/raw_1_year/LCC/June/", full.names = TRUE)
temp_rasters <- stack(filelist1)
temp_30_avg_june <- raster("data/climate/WorldClim/temp_30_avg_june_LCC.tif")
temp_30_avg_july <- raster("data/climate/WorldClim/temp_30_avg_july_LCC.tif")
landcover <- raster("data/landcover/Northern_Land_Cover_2000/landcover_mosaic_lcc.tif")
all_polygons <- readRDS("Robjects/all_polygons.RDS")
included_surveys <- readRDS("Robjects/included_surveys.RDS")
prism <- readRDS("Robjects/prism.RDS")
###TEMPERATURE
#add year so that plots can be matched with annual temp
years <- prism %>%
select(Plot, Year) %>%
filter(Plot %in% included_surveys$Plot) %>%
filter(Plot %in% all_polygons$Plot) %>%
distinct()
all_polygons <- merge(all_polygons, years, all.y = TRUE)
all_polygons <- st_transform(all_polygons, LCC)
#all_polygons <- as_Spatial(all_polygons)
###extract annual temperature
#split the dataset up by year
all_polygons_year <- all_polygons %>%
filter(Year != 2019) %>%
group_split(Year)
year_names <- paste("temp", head(sort(unique(all_polygons$Year)), -1), sep = "")
names(all_polygons_year) <- year_names
# extract annual temperature for each group
names(temp_rasters) <-year_names
for(i in 1:length(all_polygons_year)){
yr <- names(all_polygons_year[i])
ras <- subset(temp_rasters, yr)
all_polygons_year[[i]] <- raster::extract(ras, all_polygons_year[[i]], na.rm = TRUE, fun = mean, sp = TRUE)
}
#ignore error messages, should be fine -  https://gis.stackexchange.com/questions/364667/r-4-0-1-not-sure-i-understand-this-message-warning-message-in-proj4stringx
#save incase I make a mistake
#all_polygons_year_tmp <- all_polygons_year
#all_polygons_year <- all_polygons_year_tmp
all_polygons_year <- lapply(all_polygons_year, st_as_sf)
#rename temp columns so that I can merge them together
all_polygons_year <- lapply(all_polygons_year, setNames, nm = c("Plot", "Year", "temp_yr_min_june", "geometry"))
#merge together
all_polygons_year <- do.call("rbind", all_polygons_year)
### need to manually find the KWI data, as I did for the previous plots
all_polygons <- all_polygons_year
#merge with the version where missing values have been added manually
#maybe chenage them to be added programmatically?
# Do I need to add anything to this version? apparently not, which is weird to me
###extract 30 year temperatures
all_polygons <- raster::extract(temp_30_avg_june, all_polygons, na.rm = TRUE, fun = mean, sp = TRUE)
all_polygons <- raster::extract(temp_30_avg_july, all_polygons, na.rm = TRUE, fun = mean, sp = TRUE)
#just a dataframe
all_polygons_df <- all_polygons@data
###fix missing data
#import version where missing temp have been manually added
fix_missing_temps <- read.csv("data/climate/WorldClim/fix_missing_temps.csv")
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june)) %>%
select(-temp_30_avg_june, -temp_30_avg_july) %>%
merge(fix_missing_temps)
all_polygons_df <- all_polygons_df %>%
filter(not.na(temp_30_avg_june)) %>%
merge(all_polygons_df2, all = TRUE)
#fix the missing annual temperature
all_polygons_df$temp_yr_min_june[all_polygons_df$Plot == "KWI-1314B"] <- -0.8
#####LANDCOVER
#extract landcover
#plot_lc2 <- raster::extract(landcover, all_polygons, df = T, weights = T, normalizeWeights = T)
#saveRDS(plot_lc2, "Robjects/plot_lc2.RDS")
all_polygons_df <- all_polygons_df[,1:5]
plot_lc2 <- readRDS("Robjects/plot_lc2.RDS")
prop_lc <- plot_lc2 %>%
group_by(ID, landcover_mosaic_lcc) %>%
dplyr::summarize(prop = sum(weight))
names <- data.frame(Plot = all_polygons$Plot, ID = 1:length(all_polygons$Plot))
prop_lc <- merge(prop_lc, names)
prop_lc <- prop_lc %>%
ungroup %>%
dplyr::select(-ID) %>%
dplyr::rename(lc_code = landcover_mosaic_lcc)
landcover_classes <- data.frame(lc_code = 0:15,
lc_class = c(
"00_missing_data",
"01_tussock_graminoid",
"02_wet_sedge",
"03_nontussock_graminoid_dwarf_shrub",
"04_dry_graminoid_prostrate_dwarf_shrub_tundra",
"05_low_shrub",
"06_tall_shrub",
"07_prostrate_dwarf_shrub",
"08_sparsely_vegetated_bedrock",
"09_sparsely_vegetated_till",
"10_bare_soil_cryptogam_frost_boils",
"11_wetlands",
"12_barren",
"13_ice_snow",
"14_shadow",
"15_water"),
lc_group = c(
"missing data",
"graminoid",
"graminoid",
"graminoid",
"graminoid",
"shrub",
"shrub",
"shrub",
"sparsely_vegetated",
"sparsely_vegetated",
"sparsely_vegetated",
"wetland",
"barren",
"ice_snow",
"shadow",
"water"))
prop_lc <- merge(prop_lc, landcover_classes) %>%
distinct()
prop_lc$Plot <- as.character(prop_lc$Plot)
#wide version
prop_lc_wide <- prop_lc %>%
select(-lc_group, -lc_code) %>%
spread(lc_class, prop, fill = 0)
#summarize group
group <- prop_lc %>%
group_by(Plot, lc_group) %>%
summarize(sum_group = sum(prop)) %>%
mutate(lc_group = paste("group", lc_group, sep = "_")) %>%
spread(lc_group, sum_group, fill = 0)
all_polygons_df <- merge(all_polygons_df, prop_lc_wide, by = "Plot")
all_polygons_df <- merge(all_polygons_df, group, by = "Plot")
#saveRDS
saveRDS(all_polygons_df, "Robjects/all_polygons_df.RDS")
#for editing temps
#writeOGR(all_polygons, "all_polygons.shp", "all_polygons", driver="ESRI Shapefile")
#writeRaster(temp_30_avg_june, "temp_30_avg_june.tif")
#writeRaster(temp_30_avg_july, "temp_30_avg_july.tif")
#write_csv(all_polygons_df, "exported/all_polygons_df_june26.csv")
#write_csv(fix_missing_temps, "data/climate/WorldClim/fix_missing_temps.csv")
#background values for predictor variables
bckgrd_temp_30_avg_june <- sampleRandom(temp_30_avg_june, 10000)
bckgrd_temp_30_avg_july <- sampleRandom(temp_30_avg_june, 10000)
View(all_polygons_df)
all_polygons_dfx <- all_polygons@data
View(all_polygons_dfx)
all_polygons_df <- all_polygons@data
fix_missing_temps <- read.csv("data/climate/WorldClim/fix_missing_temps.csv")
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june)) %>%
select(-temp_30_avg_june, -temp_30_avg_july) %>%
merge(fix_missing_temps)
View(all_polygons_df)
all_polygons_df2 <- all_polygons_df %>%
filter(temp_30_avg_june == "NaN")
all_polygons_df2 <- all_polygons_df %>%
filter(temp_30_avg_june = "NaN")
##### LOAD PACKAGES
library(raster)
library(ggplot2)
library(lme4)
library(lubridate)
library(reshape2)
library(beepr)
library(rgdal)
library(sp)
library(MASS)
library(rgeos)
library(maptools)
library(rgdal)
library(reshape)
#library(SDMTools)
#library(velox)
library(gdalUtils)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
library(tidyverse)
library(units)
#library(stringi)
#library(lwgeom)
library(measurements)
library(miceadds)
library(plotKML)
library(tmaptools)
library(GGally)
#-- Conflicts ------------------------------------------ tidyverse_conflicts() --
# x lubridate::as.difftime() masks base::as.difftime()
# x lubridate::date()        masks base::date()
# x tidyr::expand()          masks Matrix::expand()
# x tidyr::extract()         masks raster::extract()
# x dplyr::filter()          masks stats::filter()
# x lubridate::intersect()   masks raster::intersect(), base::intersect()
# x dplyr::lag()             masks stats::lag()
# x dplyr::select()          masks raster::select()
# x lubridate::setdiff()     masks base::setdiff()
# x lubridate::union()       masks raster::union(), base::union()
#### settings
options(scipen=999) #disable scientific notation
options(stringsAsFactors = FALSE) #disable strings as factors
#### source custom functions
source.all("functions/")
##### OBJECTS SPECIFIC TO THIS PROJECT
## Coordinate reference systems
#NPLAEA <-  CRS("+init=EPSG:3573")
#AEA <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
LCC <- CRS("+proj=lcc +lat_1=49 +lat_2=77 +lat_0=0 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs")
WGS84 <- CRS("+init=EPSG:4326")
NAD83 <- CRS("+init=EPSG:4269")
#### Read in raw data
# Read in full PRISM dataset
bigdata_raw <-read.csv("data/PRISM/PRISM 1994 to 2019_20191210_CAedits_20200529.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
all_polygons_df2 <- all_polygons_df %>%
filter(temp_30_avg_june == "NaN")
View(all_polygons_df)
str(all_polygons_df)
all_polygons_df2 <- all_polygons_df %>%
filter(temp_30_avg_june == 1.8)
?filter
all_polygons_df2 <- all_polygons_df %>%
dplyr::filter(temp_30_avg_june == 1.8)
View(all_polygons_df)
all_polygons_df2 <- all_polygons_df %>%
filter(Year == 1994)
View(all_polygons_df2)
View(all_polygons_df)
table(is.na(all_polygons_df$temp_30_avg_june_LCC))
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june_LCC)) %>%
select(-temp_30_avg_june, -temp_30_avg_july_LCC) %>%
merge(fix_missing_temps)
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june_LCC))
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june_LCC)) %>%
select(-temp_30_avg_june_LCC, -temp_30_avg_july_LCC)
all_polygons_df2 <- all_polygons_df %>%
filter(is.na(temp_30_avg_june_LCC)) %>%
select(-temp_30_avg_june_LCC, -temp_30_avg_july_LCC) %>%
merge(fix_missing_temps)
View(all_polygons_df2)
View(all_polygons_df)
all_polygons_df <- all_polygons_df %>%
rename(temp_30_avg_june = temp_30_avg_june_LCC, temp_30_avg_july = temp_30_avg_july_LCC)
View(all_polygons_df)
all_polygons_df <- all_polygons_df %>%
rename(temp_30_avg_june = temp_30_avg_june_LCC, temp_30_avg_july = temp_30_avg_july_LCC) %>%
filter(not.na(temp_30_avg_june)) %>%
merge(all_polygons_df2, all = TRUE)
View(all_polygons_df2)
View(all_polygons_df)
all_polygons_df <- all_polygons_df %>%
#rename(temp_30_avg_june = temp_30_avg_june_LCC, temp_30_avg_july = temp_30_avg_july_LCC) %>%
filter(not.na(temp_30_avg_june)) %>%
merge(all_polygons_df2, all = TRUE)
all_polygons_df$temp_yr_min_june[all_polygons_df$Plot == "KWI-1314B"] <- -0.8
View(all_polygons_df)
#saveRDS(plot_lc2, "Robjects/plot_lc2.RDS")
all_polygons_df <- all_polygons_df[,1:5]
plot_lc2 <- readRDS("Robjects/plot_lc2.RDS")
prop_lc <- plot_lc2 %>%
group_by(ID, landcover_mosaic_lcc) %>%
dplyr::summarize(prop = sum(weight))
names <- data.frame(Plot = all_polygons$Plot, ID = 1:length(all_polygons$Plot))
prop_lc <- merge(prop_lc, names)
prop_lc <- prop_lc %>%
ungroup %>%
dplyr::select(-ID) %>%
dplyr::rename(lc_code = landcover_mosaic_lcc)
landcover_classes <- data.frame(lc_code = 0:15,
lc_class = c(
"00_missing_data",
"01_tussock_graminoid",
"02_wet_sedge",
"03_nontussock_graminoid_dwarf_shrub",
"04_dry_graminoid_prostrate_dwarf_shrub_tundra",
"05_low_shrub",
"06_tall_shrub",
"07_prostrate_dwarf_shrub",
"08_sparsely_vegetated_bedrock",
"09_sparsely_vegetated_till",
"10_bare_soil_cryptogam_frost_boils",
"11_wetlands",
"12_barren",
"13_ice_snow",
"14_shadow",
"15_water"),
lc_group = c(
"missing data",
"graminoid",
"graminoid",
"graminoid",
"graminoid",
"shrub",
"shrub",
"shrub",
"sparsely_vegetated",
"sparsely_vegetated",
"sparsely_vegetated",
"wetland",
"barren",
"ice_snow",
"shadow",
"water"))
prop_lc <- merge(prop_lc, landcover_classes) %>%
distinct()
prop_lc$Plot <- as.character(prop_lc$Plot)
#wide version
prop_lc_wide <- prop_lc %>%
select(-lc_group, -lc_code) %>%
spread(lc_class, prop, fill = 0)
#summarize group
group <- prop_lc %>%
group_by(Plot, lc_group) %>%
summarize(sum_group = sum(prop)) %>%
mutate(lc_group = paste("group", lc_group, sep = "_")) %>%
spread(lc_group, sum_group, fill = 0)
all_polygons_df <- merge(all_polygons_df, prop_lc_wide, by = "Plot")
all_polygons_df <- merge(all_polygons_df, group, by = "Plot")
View(prop_lc_wide)
prop_lc_wide <- prop_lc %>%
select(-lc_group, -lc_code)
View(prop_lc_wide)
View(prop_lc_wide)
View(prop_lc)
View(plot_lc2)
View(prop_lc)
View(plot_lc2)
prop_lc <- plot_lc2 %>%
group_by(ID, landcover_mosaic_lcc) %>%
dplyr::summarize(prop = sum(weight))
View(prop_lc)
names <- data.frame(Plot = all_polygons$Plot, ID = 1:length(all_polygons$Plot))
View(names)
x <- all_polygons$Plot
table2(x)
n_unique(prop_lc$ID)
View(all_polygons)
?extract
View(all_polygons)
all_polygons$Plot[1:20]
all_polygons$Plot[41:60]
n_unique(all_polygons$Plot)
n_unique(prop_lc$ID)
all_polygonsx <- readRDS("Robjects/all_polygons.RDS")
n_unique(all_polygonsx$Plot)
##### LOAD PACKAGES
library(raster)
library(ggplot2)
library(lme4)
library(lubridate)
library(reshape2)
library(beepr)
library(rgdal)
library(sp)
library(MASS)
library(rgeos)
library(maptools)
library(rgdal)
library(reshape)
#library(SDMTools)
#library(velox)
library(gdalUtils)
library(sf)
library(plyr)
library(dplyr)
library(ggplot2)
#library(corrplot)
#library(scales)
library(tidyverse)
library(units)
#library(stringi)
#library(lwgeom)
library(measurements)
library(miceadds)
library(plotKML)
library(tmaptools)
library(GGally)
#-- Conflicts ------------------------------------------ tidyverse_conflicts() --
# x lubridate::as.difftime() masks base::as.difftime()
# x lubridate::date()        masks base::date()
# x tidyr::expand()          masks Matrix::expand()
# x tidyr::extract()         masks raster::extract()
# x dplyr::filter()          masks stats::filter()
# x lubridate::intersect()   masks raster::intersect(), base::intersect()
# x dplyr::lag()             masks stats::lag()
# x dplyr::select()          masks raster::select()
# x lubridate::setdiff()     masks base::setdiff()
# x lubridate::union()       masks raster::union(), base::union()
#### settings
options(scipen=999) #disable scientific notation
options(stringsAsFactors = FALSE) #disable strings as factors
#### source custom functions
source.all("functions/")
##### OBJECTS SPECIFIC TO THIS PROJECT
## Coordinate reference systems
#NPLAEA <-  CRS("+init=EPSG:3573")
#AEA <- CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")
LCC <- CRS("+proj=lcc +lat_1=49 +lat_2=77 +lat_0=0 +lon_0=-95 +x_0=0 +y_0=0 +ellps=GRS80 +units=m +no_defs")
WGS84 <- CRS("+init=EPSG:4326")
NAD83 <- CRS("+init=EPSG:4269")
#### Read in raw data
# Read in full PRISM dataset
bigdata_raw <-read.csv("data/PRISM/PRISM 1994 to 2019_20191210_CAedits_20200529.csv"
, stringsAsFactors = FALSE, na.strings=c("", "NA"))
#extract environmental variables for surveyed plots
### some inconsitiencies in this code:
#why do the avg temps end up with 8 plots with "NaN", but the annual ones don't?
#Why does the finaly version of all_polygons_df have so many duplicated rows, which I got rid of using distinct()?
#I had figured this out and now I don't recall the answer
### Split this into 2 different scripts
filelist1 <- list.files("data/climate/WorldClim/raw_1_year/LCC/June/", full.names = TRUE)
temp_rasters <- stack(filelist1)
temp_30_avg_june <- raster("data/climate/WorldClim/temp_30_avg_june_LCC.tif")
temp_30_avg_july <- raster("data/climate/WorldClim/temp_30_avg_july_LCC.tif")
landcover <- raster("data/landcover/Northern_Land_Cover_2000/landcover_mosaic_lcc.tif")
all_polygons <- readRDS("Robjects/all_polygons.RDS")
included_surveys <- readRDS("Robjects/included_surveys.RDS")
prism <- readRDS("Robjects/prism.RDS")
View(temp_30_avg_june)
names(temp_30_avg_june)
names(temp_30_avg_june) <- temp_30_avg_june
names(temp_30_avg_june) <- "temp_30_avg_june"
names(temp_30_avg_july) <- "temp_30_avg_july"
writeRaster(temp_30_avg_june, "data/climate/WorldClim/temp_30_avg_june_LCC.tif")
writeRaster(temp_30_avg_june, "data/climate/WorldClim/temp_30_avg_june_LCC.tif")
writeRaster(temp_30_avg_july, "data/climate/WorldClim/temp_30_avg_july_LCC.tif")
#writeOGR(all_polygons, "all_polygons.shp", "all_polygons", driver="ESRI Shapefile")
writeRaster(temp_30_avg_june, "temp_30_avg_june_LCC.tif")
